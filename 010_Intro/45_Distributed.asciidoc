=== Distributed Nature
=== 分布式特性

At the beginning of this chapter, we said that Elasticsearch((("distributed nature of Elasticsearch"))) can scale out to
hundreds (or even thousands) of servers and handle petabytes of data. While
our tutorial gave examples of how to use Elasticsearch, it didn't touch on the
mechanics at all. Elasticsearch is distributed by nature, and it is designed
to hide the complexity that comes with being distributed.
在本章开头，我们已经提到过 Elasticsearch 既可以拓展到数百种（甚至数千种）服务器，也可以处理字节级数据。
在如何使用 Elasticsearch 方面给出实际案例时，这份教程并不涉及任何复杂性工作。
Elasticsearch 生来即分布式，同时在设计时已经隐藏了由分布式所带来的复杂特性。

The distributed aspect of Elasticsearch is largely transparent.  Nothing in
the tutorial required you to know about distributed systems, sharding, cluster
discovery, or dozens of other distributed concepts.  It happily ran the
tutorial on a single node living inside your laptop, but if you were to run
the tutorial on a cluster containing 100 nodes, everything would work in
exactly the same way.
Elasticsearch 的分布式特性很大程度上是透明的。教程不会要求你了解分布式系统、分片、集群算法或其他数十种分布式概念。
它会在你的电脑中的每个节点上开心地跑程序，即使你要在一个包含 100 个节点的集群上运行程序，一切依旧顺畅。

Elasticsearch tries hard to hide the complexity of distributed systems. Here are some of
the operations happening automatically under the hood:
Elasticsearch 尽其所能来隐藏分布式系统的复杂性。这里我们列举了一些自动运行的操作：

 * Partitioning your documents into different containers((("documents", "partitioning into shards")))((("shards"))) or _shards_, which
   can be stored on a single node or on  multiple nodes
   * 在不同容器或分片中进行文档分区，同时操作可以储存在单一或多个节点中；

 * Balancing these shards across the nodes in your cluster to spread the
   indexing and search load
   * 为拓展索引以及搜索负载量，在集群中跨节点平衡分片；

 * Duplicating each shard to provide redundant copies of your data, to
   prevent data loss in case of hardware failure
   * 复制每个分片来保证数据多余拷贝，这样能防止因为硬件故障导致数据丢失；

 * Routing requests from any node in the cluster to the nodes that hold the
   data you're interested in
   * 将集群中任一节点中的请求与存储有你感兴趣数据的节点联系在一起；

 * Seamlessly integrating new nodes as your cluster grows or redistributing
   shards to recover from node loss
   * 随着集群增长，无缝地整合新节点；自动重新分配分片来恢复丢失节点。

As you read through this book, you'll encounter supplemental chapters about the
distributed nature of Elasticsearch.  These chapters will teach you about
how the cluster scales and deals with failover (<<distributed-cluster>>),
handles document storage (<<distributed-docs>>), executes distributed search
(<<distributed-search>>), and what a shard is and how it works
(<<inside-a-shard>>).
当你阅读此教程时，你会遇到有关 Elasticsearch 分布式特性的补充章节。这些章节将教你有关集群规模、如何处理故障转移、处理文档存储、执行分布式搜索、什么是分区（shard）以及它的工作原理。

These chapters are not required reading--you can use Elasticsearch without
understanding these internals--but they will provide insight that will make
your knowledge of Elasticsearch more complete. Feel free to skim them and
revisit at a later point when you need a more complete understanding.
这些章节不强制你阅读，你完全可以在没有理解这些内核知识的情况下使用 Elasticsearch。但是他们会帮助你在学习 Elasticsearch 时有更多的洞察力。跳过他们吧，不要有压力，当你需要更深入的理解时回过头来读也无妨。
