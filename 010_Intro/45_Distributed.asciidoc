=== Distributed Nature
=== 分布式特性

At the beginning of this chapter, we said that Elasticsearch((("distributed nature of Elasticsearch"))) can scale out to
hundreds (or even thousands) of servers and handle petabytes of data. While
our tutorial gave examples of how to use Elasticsearch, it didn't touch on the
mechanics at all. Elasticsearch is distributed by nature, and it is designed
to hide the complexity that comes with being distributed.
在本章开头，我们已经提到过 Elasticsearch 既可以拓展到数百种（甚至数千种）服务器，也可以处理字节级数据。
在如何使用 Elasticsearch 方面给出实际案例时，我们的教程并没有提及到实现原理。
Elasticsearch 在设计时即具备分布式特性，同时由分布式所带来的复杂特性也已被隐藏。

The distributed aspect of Elasticsearch is largely transparent.  Nothing in
the tutorial required you to know about distributed systems, sharding, cluster
discovery, or dozens of other distributed concepts.  It happily ran the
tutorial on a single node living inside your laptop, but if you were to run
the tutorial on a cluster containing 100 nodes, everything would work in
exactly the same way.

Elasticsearch 的分布式特性大部分是透明的。同时，通篇教程并不会要求你搞明白什么是分布式系统、分区、聚类模式挖掘以及各式各样的分布式概念。教程会在你电脑中的单个节点上幸福地运行着——即使你计划在一个包含 100 个节点的集群中运行教程，操作流程不会发生丝毫变化。

Elasticsearch tries hard to hide the complexity of distributed systems. Here are some of
the operations happening automatically under the hood:
Elasticsearch 努力隐藏分布式系统的复杂性，以下是一些在后台自动运行的操作：

 * Partitioning your documents into different containers((("documents", "partitioning into shards")))((("shards"))) or _shards_, which can be stored on a single node or on multiple nodes
 * 在不同的容器或分区中分类可以存储在单个或多个节点内的文档

 * Balancing these shards across the nodes in your cluster to spread the
   indexing and search load
 * 在集群中通过各节点平衡分区，以此来拓展索引与搜索的负载量

 * Duplicating each shard to provide redundant copies of your data, to
   prevent data loss in case of hardware failure
 * 以防因硬件故障导致数据丢失，备份各个分区来准备数据的冗余拷贝

 * Routing requests from any node in the cluster to the nodes that hold the
   data you're interested in
 * 对于集群中存储有你感兴趣的数据的节点之间的请求路由（黑人问号脸！！

 * Seamlessly integrating new nodes as your cluster grows or redistributing
   shards to recover from node loss
 * 集群拓展时无缝整合新的节点或重新分区来恢复丢失的节点

As you read through this book, you'll encounter supplemental chapters about the
distributed nature of Elasticsearch.  These chapters will teach you about
how the cluster scales and deals with failover (<<distributed-cluster>>),
handles document storage (<<distributed-docs>>), executes distributed search
(<<distributed-search>>), and what a shard is and how it works
(<<inside-a-shard>>).
当你通篇阅读此书的时候，你会接触到针对 Elasticsearch 分布式特性进行补充说明的章节。这些章节将教你明白集群如何衡量并处理容错、调整文档存储以及分区的定义及运行原理。

These chapters are not required reading--you can use Elasticsearch without
understanding these internals--but they will provide insight that will make
your knowledge of Elasticsearch more complete. Feel free to skim them and
revisit at a later point when you need a more complete understanding.
这些章节并非强制阅读，实际上你可以完全不用理解这些内核原理就能上手使用 Elasticsearch，然而这些原理所隐含的洞察力能帮助你更深刻掌握这门框架。随意浏览即可，当你需要更深刻理解的时候再温习也不迟。

